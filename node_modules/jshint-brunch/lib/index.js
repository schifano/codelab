// Generated by CoffeeScript 1.6.3
var JSHintLinter, formatError, fs, jshint, jshintcli, path, removeComments;

jshint = require('jshint').JSHINT;

jshintcli = require('jshint/src/cli');

fs = require('fs');

path = require('path');

formatError = function(error) {
  var evidence;
  evidence = (error.evidence ? "\n\n" + error.evidence + "\n" : '\n');
  return "" + error.reason + " " + (error.id || '') + " at line " + error.line + ", column " + error.character;
};

removeComments = function(str) {
  str = str || "";
  str = str.replace(/\/\*(?:(?!\*\/)[\s\S])*\*\//g, "");
  return str = str.replace(/\/\/[^\n\r]*/g, "");
};

module.exports = JSHintLinter = (function() {
  JSHintLinter.prototype.brunchPlugin = true;

  JSHintLinter.prototype.type = 'javascript';

  JSHintLinter.prototype.extension = 'js';

  function JSHintLinter(config) {
    var buff, cfg, filename, stats, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    this.config = config;
    if ('jshint' in this.config) {
      console.warn("Warning: config.jshint is deprecated, please move it to config.plugins.jshint");
    }
    cfg = (_ref = (_ref1 = (_ref2 = this.config) != null ? (_ref3 = _ref2.plugins) != null ? _ref3.jshint : void 0 : void 0) != null ? _ref1 : (_ref4 = this.config) != null ? _ref4.jshint : void 0) != null ? _ref : {};
    this.options = cfg.options != null ? cfg.options : void 0;
    this.globals = cfg.globals;
    this.pattern = (_ref5 = cfg.pattern) != null ? _ref5 : RegExp("^" + this.config.paths.app + ".*\\.js$");
    this.warnOnly = cfg.warnOnly;
    if (!this.options) {
      filename = path.join(process.cwd(), ".jshintrc");
      try {
        stats = fs.statSync(filename);
        if (stats.isFile()) {
          buff = fs.readFileSync(filename);
          this.options = JSON.parse(removeComments(buff.toString()));
          this.globals = this.options.globals;
          delete this.options.globals;
        }
      } catch (_error) {}
    }
  }

  JSHintLinter.prototype.lint = function(data, path, callback) {
    var error, success;
    success = jshint(data, this.options, this.globals);
    if (success) {
      callback();
      return;
    } else {
      error = jshint.errors.filter(function(error) {
        return error != null;
      }).map(formatError).join('\n');
    }
    if (this.warnOnly && (error != null)) {
      error = "warn: " + error;
    }
    return callback(error);
  };

  return JSHintLinter;

})();
